import time

# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ú–æ—è –°—Ç—Ä–æ–∫–∞, –≥–¥–µ:
# üìå –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ str
# üìå –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –∏–º—è –∞–≤—Ç–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è (time.time)


class My_str(str):
    """–†–∞—Å—à–∏—Ä—è–µ–º –∫–ª–∞—Å—Å str. """
    def __new__(cls, value, name):
        '''–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –º–µ—Ç–æ–¥ new –ø–∞—Ä–∞–º–µ—Ç—Ä value and name.'''
        instanse = super().__new__(cls, value)
        instanse.name = name
        instanse.created_at = time.time()
        return instanse
    print(__new__.__doc__)


# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ê—Ä—Ö–∏–≤, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç –ø–∞—Ä—É —Å–≤–æ–π—Å—Ç–≤. –ù–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Å–ª–æ –∏ —Å—Ç—Ä–æ–∫—É.
# üìå –ü—Ä–∏ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞, —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
# —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞—Ä—É —Å–ø–∏—Å–∫–æ–≤- –∞—Ä—Ö–∏–≤–æ–≤
# üìå list-–∞—Ä—Ö–∏–≤—ã —Ç–∞–∫–∂–µ —è–≤–ª—è—é—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
# –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç–∫–∑–∫–º–ø–ª—è—Ä–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–∏—Å—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


class Archive:
    ''' C–æ—Ö—Ä–∞–Ω–µ–Ω–∏–Ω–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ –≤ —Å–ø–∏—Å–æ–∫ numbers and values.'''
    numbers = []
    values = []

    def __new__(cls, number: int, value: str):
        '''–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ new —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–æ–∫. '''
        cls.numbers.append(number)
        cls.values.append(value)
        instance = super() . __new__(cls)
        instance.numbers = [number]
        instance. values = [value]
        return instance
    print(__new__.__doc__)

    def __init__(self, number, value):
        '''–ò–Ω–∏—Ü–∏–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π number and value'''
        self.number = number
        self.value = value

    def __repr__(self):
        '''–í—ã–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞'''
        return f'Arhive ({self.numbers} , {self.values})'
    print(__repr__.__doc__)

    def __str__(self) -> str:
        '''–í—ã–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
        return f'–ù–æ–º–µ—Ä: {self.numbers}\n –ó–Ω–∞—á–µ–Ω–∏–µ : {self.values}'
    print(__str__.__doc__)


# ‚Ä¢ –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —Å–µ–º–∏–Ω–∞—Ä–∞.
# ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ª–æ–∂–µ–Ω–∏—è –∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è.
# ‚Ä¢ –ü—Ä–∏ —ç—Ç–æ–º –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.
# ‚Ä¢ –°–∫–ª–∞–¥—ã–≤–∞–µ–º –∏ –≤—ã—á–∏—Ç–∞–µ–º –ø–µ—Ä–∏–º–µ—Ç—Ä—ã, –∞ –Ω–µ –¥–ª–∏–Ω–Ω—É –∏ —à–∏—Ä–∏–Ω—É.
# ‚Ä¢ –ü—Ä–∏ –≤—ã—á–∏—Ç–∞–Ω–∏–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞–π—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.

class Rectangle:
    '''–ö–ª–∞—Å—Å –ø–æ–¥—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –∏ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞'''

    def __init__(self, side_1, side_2=None):
        '''–ò–Ω–∏—Ü–∏–ª–∏–∑–∞—Ü–∏—è —Å—Ç–æ—Ä–æ–Ω –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞'''
        self.side_1 = side_1
        self.side_2 = side_2 if side_2 is not None else side_1

    def area(self):
        '''–ü–æ–¥—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞'''
        return self.side_2 * self.side_1
    print(area.__doc__)

    def perimetr(self):
        '''–ü–æ–¥—Å—á–µ—Ç –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞'''
        return 2 * (self.side_1 + self.side_2)
    print(perimetr.__doc__)

    def __add__(self, other):
        '''–ü–æ–¥—Å—á–µ—Ç —Å—Ç–æ—Ä–æ–Ω—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∏–∑ –µ–≥–æ –ø–ª–æ—â–∞–¥–∏ '''
        new_perimetr = self.perimetr() + other.perimetr()
        new_a = self.side_1
        new_b = new_perimetr / 2 - new_a
        return Rectangle(new_a, new_b)
    print(__add__.__doc__)

    def __sub__(self, other):
        new_perimetr = abs(self.perimetr() + other.perimetr())
        new_a = min([self.side_1, self.side_2, other.side1, other.side2])
        new_b = new_perimetr / 2 - new_a
        return Rectangle(new_a, new_b)
    print(__sub__.__doc__)

# –î–æ–º–∞—â–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
# –î–æ–±–∞–≤—å—Ç–µ –∫–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º —Å —Å–µ–º–∏–Ω–∞—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –º–µ—Ç–æ–¥—ã –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ –ø–µ—á–∞—Ç—å.
# –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ú–∞—Ç—Ä–∏—Ü–∞.
# –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥—ã –¥–ª—è:
# –≤—ã–≤–æ–¥–∞ –Ω–∞ –ø–µ—á–∞—Ç—å,
# —Å—Ä–∞–≤–Ω–µ–Ω–∏—è,
# —Å–ª–æ–∂–µ–Ω–∏—è,


class Matrix:

    def __init__(self, matrix_1, matrix_2):
        self.matrix_1 = matrix_1
        self.matrix_2 = matrix_2

    def matrix_sum(self):
        return summa(self.matrix_1 + self.matrix_2)

    def comparison_matrix(sefl):
        return print('–†–∞–≤–Ω—ã' if self.matrix_1 == self.matrix_2 else '–ù–µ —Ä–∞–≤–Ω—ã')


# if __name__=='__main__':
    # mystr=My_str('–°—Ç—Ä–æ–∫–∞','I_am')
    # print(mystr.name)
    # print(mystr.created_at)
    # print(mystr)
    # print(mystr.upper())

    # a_1=Archive(1,'One')
    # a_2=Archive(2,'Two')
    # print(f'{a_1.numbers }, {a_1.values }')
    # print(f'{a_2.numbers }, {a_2.values }')
    # print(a_1.__repr__())
    # print(f'{a_1 =}') # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–∑–æ–≤–∞ –∏–∑ 58 —Å—Ç—Ä–æ–∫–∏
    # print(a_1)
    # rect1 = Rectangle(2 , 5)
    # rect2 = Rectangle(5 , 10 )
    # print(f'{rect1.area()=},{rect1.perimetr()=}')
    # print(f'{rect2.area()=},{rect2.perimetr()=}')
    # res_sum = rect1 + rect2
    # print(res_sum.side_1 , res_sum.side_2)
    # res_sub = rect1 - rect2

    mat = Matrix[[12, 6, 8],
                 [8, 4, 33]

                 ]

    print(mat)
