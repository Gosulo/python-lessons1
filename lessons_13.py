

#–ó–∞–¥–∞–Ω–∏–µ No1
#üìå –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –æ–Ω –Ω–µ –≤–≤–µ–¥—ë—Ç —Ü–µ–ª–æ–µ –∏–ª–∏ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ.
#üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –Ω–µ —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.

def give_number():
    while True:
        num = int(input('Give me number: '))
        try:
            #if isinstance(num, (int,float)):
            num =float(num)
            break
        
        except ValueError as e:
            print(f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {e}\n –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞')
    try:
        num = int(num)
            break
    except ValueError as e:
    print(f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {e}\n –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞')
            

#–ó–∞–¥–∞–Ω–∏–µ No2
#üìå –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–æ–≥ get –¥–ª—è —Å–ª–æ–≤–∞—Ä—è.
#üìå –ü–æ–º–∏–º–æ —Å–∞–º–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
#üìå –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–ª—é—á—É —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
#üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π.

def get_default(data: dict, key , value = 1):

    try:
        result = data[key]
    except KeyError as e:
        result = value
        return result


#–ó–∞–¥–∞–Ω–∏–µ No3
#üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å —Å –±–∞–∑–æ–≤—ã–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –∏ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–ª–∞—Å—Å—ã- –∏—Å–∫–ª—é—á–µ–Ω–∏—è:
#‚óã –æ—à–∏–±–∫–∞ —É—Ä–æ–≤–Ω—è,
#‚óã –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.

class Castom:
    pass


class LevelError:
    pass


class AccesseError:
    pass



#–ù–∞–ø–∏—à–∏—Ç–µ –∫ –Ω–∏–º –∫–ª–∞—Å—Å—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å –≤—ã–≤–æ–¥–æ–º –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. 
# –ü–æ–¥–Ω–∏–º–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞. 
# –ù–∞–ø—Ä–∏–º–µ—Ä –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã.

class Rectangle: 
    '''–ö–ª–∞—Å—Å –ø–æ–¥—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –∏ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞'''
    __slots__ = ('side_1', 'side_2')


    def __init__(self, side_1, side_2=None):
        '''–ò–Ω–∏—Ü–∏–ª–∏–∑–∞—Ü–∏—è —Å—Ç–æ—Ä–æ–Ω –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞'''
        self.side_1 = side_1
        self.side_2 = side_2 if side_2 is not None else side_1



    @property
    def side_1(self):
        return self.side_1
    
    @property
    def side_2(self):
        return self.side_2
    
    @side_1.setter
    def side_1(self,value):
        try:
            self.side_1 < 0
        except ValueError as e:
            print(f'–°—Ç–æ—Ä–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π')
            self.side_1= 1
            print(f'–ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —á–∏—Å–ª–æ {self.side_1}')
        if value > 0:
            self.side_1= value
        else:
            raise ValueError('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ')
    
    @side_2.setter
    def side_2(self,value):
        if value > 0:
            self.side_2= value
        else:
            raise ValueError('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ') 
        

    def area(self):
        '''–ü–æ–¥—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞'''
        return self.side_2 * self.side_1
    #print(area.__doc__)

    def perimetr(self):
        '''–ü–æ–¥—Å—á–µ—Ç –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞'''
        return 2 * (self.side_1 + self.side_2)
    #print(perimetr.__doc__)

    def __add__(self, other):
        '''–ü–æ–¥—Å—á–µ—Ç —Å—Ç–æ—Ä–æ–Ω—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∏–∑ –µ–≥–æ –ø–ª–æ—â–∞–¥–∏ '''
        new_perimetr = self.perimetr() + other.perimetr()
        new_a = self.side_1
        new_b = new_perimetr / 2 - new_a
        return Rectangle(new_a, new_b)
    #print(__add__.__doc__)

    def __sub__(self, other):
        new_perimetr = abs(self.perimetr() + other.perimetr())
        new_a = min([self.side_1, self.side_2, other.side1, other.side2])
        new_b = new_perimetr / 2 - new_a
        return Rectangle(new_a, new_b)